openapi: "3.0.1"
info:
   title: "my-first-api"
   description: "First API with IaC example"
   version: "1.0"

x-amazon-apigateway-request-validators:
    All:
        validateRequestBody: true
        validateRequestParameters: true
    Body:
        validateRequestBody: true
        validateRequestParameters: false
    Params:
        validateRequestBody: false
        validateRequestParameters: true

x-amazon-apigateway-request-validator: Body

paths:
    /pricepermeter:
        post:
            consumes:
            - "application/json"
            produces:
            - "application/json"
            responses:
                "200":
                    description: "200 response"
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/costCalculatorRequest"
            x-amazon-apigateway-integration:
                httpMethod: "POST"
                credentials:
                    Fn::GetAtt: [LambdaExecutionRole, Arn]
                uri: 
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CostCalculator.Arn}/invocations"
                responses:
                    default:
                        statusCode: "200"
                        responseTemplates:
                            application/json: | 
                                #set($allParams = $input.params())
                                {
                                "body-json" : $input.json('$'),
                                "params" : {
                                #foreach($type in $allParams.keySet())
                                    #set($params = $allParams.get($type))
                                "$type" : {
                                    #foreach($paramName in $params.keySet())
                                    "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                                        #if($foreach.hasNext),#end
                                    #end
                                }
                                    #if($foreach.hasNext),#end
                                #end
                                },
                                "stage-variables" : {
                                #foreach($key in $stageVariables.keySet())
                                "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                                    #if($foreach.hasNext),#end
                                #end
                                },
                                "context" : {
                                    "account-id" : "$context.identity.accountId",
                                    "api-id" : "$context.apiId",
                                    "api-key" : "$context.identity.apiKey",
                                    "authorizer-principal-id" : "$context.authorizer.principalId",
                                    "caller" : "$context.identity.caller",
                                    "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                                    "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                                    "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                                    "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                                    "http-method" : "$context.httpMethod",
                                    "stage" : "$context.stage",
                                    "source-ip" : "$context.identity.sourceIp",
                                    "user" : "$context.identity.user",
                                    "user-agent" : "$context.identity.userAgent",
                                    "user-arn" : "$context.identity.userArn",
                                    "request-id" : "$context.requestId",
                                    "resource-id" : "$context.resourceId",
                                    "resource-path" : "$context.resourcePath"
                                    }
                                }
                requestTemplates:
                    application/json: |
                        #set($inputRoot = $input.path('$'))
                        {
                            "price": $inputRoot.price,
                            "size": $inputRoot.size,
                            "unit": "$inputRoot.unit",
                            "downPayment": $inputRoot.downPayment
                        }
                passthroughBehavior: "when_no_match"
                type: "aws"
# * The following is a definition of the request body for the API Gateway               
components:
    schemas:
        costCalculatorRequest:
            type: object
            properties:
                price:
                    type: number
                size:
                    type: number
                unit:
                    type: string
                downPayment:
                    type: number