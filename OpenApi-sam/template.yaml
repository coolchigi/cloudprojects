AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Sample SAM Template for my first API with IaC

Globals:
    # Enable Logs
    Api:
        CacheClusterEnabled: True
        CacheClusterSize: "0.5"
        MethodSettings:
            - ResourcePath: "/*"
              HttpMethod: "*"
              DataTraceEnabled: True
              LoggingLevel: INFO
              MetricsEnabled: True
              CacheDataEncrypted: True
              CacheTtlInSeconds: 60
              CachingEnabled: True
    Function:
        Timeout: 3
        Runtime: nodejs18.x

Resources:

    # REST API                                                             
    FirstAPI:
        Type: AWS::Serverless::Api
        Properties:
            StageName: dev
            OpenApiVersion: 3.0.3
            DefinitionBody: # an OpenApi definition
                "Fn::Transform":
                    Name: "AWS::Include"
                    Parameters:
                        Location: "openapi.yaml"
            EndpointConfiguration:
                Type: REGIONAL
            MethodSettings:
            - ResourcePath: "/medianpricecalculator"
              HttpMethod: "POST"
              CacheDataEncrypted: True
              CacheTtlInSeconds: 60
              CachingEnabled: True
    
    # Usage Plan for REST API
    FirstAPIUsagePlan:
        Type: AWS::ApiGateway::UsagePlan
        DependsOn:
          - FirstAPIdevStage
        Properties:
            ApiStages:
              - ApiId: !Ref FirstAPI
                Stage: dev
                Throttle:
                    "/medianpricecalculator/POST":
                        BurstLimit: 200
                        RateLimit: 100
            Description: Exclusive plan for our best customers
            Quota:
                Limit: 5000
                Period: MONTH
            Throttle:
                BurstLimit: 100
                RateLimit: 200
            UsagePlanName: Platinum
    
    # API Key for REST API
    FirstAPIKey:
        Type: AWS::ApiGateway::ApiKey
        DependsOn:
          - FirstAPIUsagePlan
        Properties:
            Name: myFirstApiKey
            Description: Main key for my-first-api API
            Enabled: True
            StageKeys:
              - RestApiId: !Ref FirstAPI
                StageName: dev
                
    # Link API Key to UsagePlan
    LinkUsagePlanApiKey:
        Type: AWS::ApiGateway::UsagePlanKey
        Properties:
            KeyId: 
                Ref: FirstAPIKey
            KeyType: API_KEY
            UsagePlanId: 
                Ref: FirstAPIUsagePlan


    # Lambda functions                                                     
    CostCalculator:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: handlers/
            Handler: cost-calculator.CostCalculator
    MedianPriceCalculator:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: handlers/
            Handler: median-price-calculator.MedianPriceCalculator
    CostCalculatorUserPool:
        Type: AWS::Cognito::UserPool
        Properties:
            UserPoolName: "CostCalculatorUserPool"
            Policies:
                PasswordPolicy:
                    MinimumLength: 8
                    RequireLowercase: true
                    RequireNumbers: true
                    RequireUppercase: true
    CostCalculatorUserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
            ClientName: Cost-Calculator-App-Client
            UserPoolId: !Ref CostCalculatorUserPool
            GenerateSecret: false
            ExplicitAuthFlows:
                - ALLOW_ADMIN_USER_PASSWORD_AUTH
                - ALLOW_REFRESH_TOKEN_AUTH
                - ALLOW_CUSTOM_AUTH
                - ALLOW_USER_PASSWORD_AUTH
                - ALLOW_USER_SRP_AUTH
            
    # Execution Role
    LambdaExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - apigateway.amazonaws.com
                    Action:
                      - 'sts:AssumeRole'
            Policies:
                - PolicyName: AllowLambdaExec
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action: 'lambda:InvokeFunction'
                        Resource: [
                          !GetAtt CostCalculator.Arn, 
                          !GetAtt MedianPriceCalculator.Arn]
    ApiCWLRoleArn:
      Type: AWS::ApiGateway::Account
      Properties: 
        CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

# IAM Role for API Gateway + CloudWatch Logging
    CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
Outputs:
  FirstAPI:
    Description: "API Gateway endpoint URL to call my first api"
    Value: !Sub "https://${FirstAPI}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  CognitoUserPool:
    Description: "Cognito User Pool"
    Value: !Ref CostCalculatorUserPool
  CostCalculatorUserPoolClient:
    Description: "Cognito User Pool Client"
    Value: !Ref CostCalculatorUserPoolClient

